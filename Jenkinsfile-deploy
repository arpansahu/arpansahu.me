pipeline {
    agent { label 'local' }
    parameters {
        booleanParam(name: 'skip_checks', defaultValue: false, description: 'Skip the Check for Changes stage')
        choice(name: 'DEPLOY_TYPE', choices: ['kubernetes', 'docker'], description: 'Select deployment type')
    }
    environment {
        REGISTRY = "harbor.arpansahu.me"
        REPOSITORY = "library/arpansahu_dot_me"
        IMAGE_TAG = "latest"  // or use a specific tag if needed
        KUBECONFIG = "${env.WORKSPACE}/kubeconfig"  // Set the KUBECONFIG environment variable
        NGINX_CONF = "/etc/nginx/sites-available/arpansahu-dot-me"
        ENV_PROJECT_NAME = "arpansahu_dot_me"
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    echo "Current workspace path is: ${env.WORKSPACE}"
                }
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Setup Kubernetes Config') {
            when {
                expression { return params.DEPLOY_TYPE == 'kubernetes' }
            }
            steps {
                script {
                    // Copy the kubeconfig file to the workspace
                    sh "sudo cp /root/.kube/config ${env.WORKSPACE}/kubeconfig"
                    // Change permissions of the kubeconfig file
                    sh "sudo chmod 644 ${env.WORKSPACE}/kubeconfig"
                }
            }
        }
        stage('Login to Docker') {
            when {
                expression { !params.skip_checks }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'harbor-credentials', passwordVariable: 'DOCKER_REGISTRY_PASSWORD', usernameVariable: 'DOCKER_REGISTRY_USERNAME')]) {
                        // Log in to Docker registry using credentials store
                        sh '''
                        echo $DOCKER_REGISTRY_PASSWORD | docker login ${REGISTRY} -u $DOCKER_REGISTRY_USERNAME --password-stdin
                        '''
                    }
                }
            }
        }
        stage('Extract Port from Dockerfile') {
            steps {
                script {
                    env.EXPOSED_PORT = sh(script: "grep '^EXPOSE' Dockerfile | awk '{print \$2}'", returnStdout: true).trim()
                    if (!env.EXPOSED_PORT) {
                        error "No EXPOSE directive found in Dockerfile"
                    } else {
                        echo "Exposed port found in Dockerfile: ${env.EXPOSED_PORT}"
                    }
                }
            }
        }
        stage('Check for New Image') {
            when {
                expression { !params.skip_checks }
            }
            steps {
                script {
                    def currentDigest = ''
                    def runningInDocker = sh(script: "docker ps -q -f name=${ENV_PROJECT_NAME}", returnStdout: true).trim()
                    if (runningInDocker) {
                        // Get the digest of the currently running Docker container
                        echo "Docker is running, getting image digest from the current Docker container"
                        currentDigest = sh(script: "docker inspect --format='{{.RepoDigests}}' ${ENV_PROJECT_NAME} | grep -o 'sha256:[a-f0-9]*'", returnStdout: true).trim()
                        echo "Current Docker image digest: ${currentDigest}"
                    } else {
                        def podName = sh(script: "kubectl get pods -l app=arpansahu-dot-me -o=jsonpath='{.items[0].metadata.name}' || echo 'none'", returnStdout: true).trim()
                        if (podName != 'none') {
                            echo "Pod is running, getting image digest from the currently running pod"
                            // Get the digest of the currently running Kubernetes pod
                            currentDigest = sh(script: "kubectl get pod ${podName} -o=jsonpath='{.status.containerStatuses[0].imageID}' | grep -o 'sha256:[a-f0-9]*'", returnStdout: true).trim()
                            echo "currentDigest: ${currentDigest}"
                        } else {
                            currentDigest = 'none'
                        }
                    }

                    if (currentDigest == 'none') {
                        echo "No running instance found in Docker or Kubernetes."
                        currentBuild.description = 'No running instance found'
                        echo "Moving on with the Deployment..."
                    } else {
                        withCredentials([usernamePassword(credentialsId: 'harbor-credentials', passwordVariable: 'DOCKER_REGISTRY_PASSWORD', usernameVariable: 'DOCKER_REGISTRY_USERNAME')]) {
                            // Get the latest image digest from the Docker registry

                            def manifest = sh(script: """curl -H "Authorization: Bearer" -s https://harbor.arpansahu.me/v2/library/arpansahu_dot_me/manifests/latest""", returnStdout: true).trim()
                            echo "Manifest: ${manifest}"

                            // Extract the digest line
                            def digestLine = manifest.split('\n').find { it.contains('"digest"') }
                            echo "Digest Line: ${digestLine}"

                            // Extract the digest value
                            def latestDigest = digestLine.split('"')[3]
                            echo "Latest Digest: ${latestDigest}"
                            

                            if (currentDigest != latestDigest) {
                                env.NEW_IMAGE_AVAILABLE = 'true'
                                echo "New image available, proceeding with deployment."
                            } else {
                                env.NEW_IMAGE_AVAILABLE = 'false'
                                echo "No new image available, skipping deployment."
                            }
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            when {
                expression {
                    return params.skip_checks || env.NEW_IMAGE_AVAILABLE == 'true' || currentBuild.description == 'No running instance found'
                }
            }
            steps {
                script {
                    if (params.DEPLOY_TYPE == 'docker') {
                        sh '''
                        sed -i "s|image: .*|image: ${REGISTRY}/${REPOSITORY}:${IMAGE_TAG}|" docker-compose.yml
                        '''
                        sh 'docker-compose down'
                        sh 'docker-compose up -d'
                        sleep 10

                        def containerRunning = sh(script: "docker ps -q -f name=${ENV_PROJECT_NAME}", returnStdout: true).trim()
                        if (!containerRunning) {
                            error "Container ${ENV_PROJECT_NAME} is not running"
                        } else {
                            echo "Container ${ENV_PROJECT_NAME} is running"
                            sh """
                                curl -v http://0.0.0.0:${env.EXPOSED_PORT} && \\
                                replicas=\$(kubectl get deployment arpansahu-dot-me-app -o=jsonpath='{.spec.replicas}') || true
                                if [ "\$replicas" != "" ] && [ \$replicas -gt 0 ]; then
                                    kubectl scale deployment arpansahu-dot-me-app --replicas=0 && \\
                                    echo 'Kubernetes deployment scaled down successfully.' && \\
                                    sudo sed -i 's|proxy_pass .*;|proxy_pass http://0.0.0.0:${env.EXPOSED_PORT};|' ${NGINX_CONF} && sudo nginx -s reload
                                else
                                    echo 'No running Kubernetes deployment to scale down.'
                                fi
                            """
                        }
                    } else if (params.DEPLOY_TYPE == 'kubernetes') {
                        // Copy the .env file to the workspace
                        sh "sudo cp /root/projectenvs/${ENV_PROJECT_NAME}/.env ${env.WORKSPACE}/"

                        // Check if the file is copied successfully
                        if (fileExists("${env.WORKSPACE}/.env")) {
                            echo ".env file copied successfully."
                            
                            // Verify Kubernetes configuration
                            sh 'kubectl cluster-info'
                            
                            // Print current directory
                            sh 'pwd'
                            
                            // Delete existing secret if it exists
                            sh '''
                            kubectl delete secret arpansahu-dot-me-secret || true
                            '''

                            // Delete the existing service and deployment
                            sh '''
                            kubectl delete service arpansahu-dot-me-service || true
                            kubectl scale deployment arpansahu-dot-me-app --replicas=0 || true
                            kubectl delete deployment arpansahu-dot-me-app || true
                            '''

                            // Deploy to Kubernetes
                            sh '''
                            kubectl create secret generic arpansahu-dot-me-secret --from-env-file=${WORKSPACE}/.env
                            kubectl apply -f ${WORKSPACE}/service.yaml
                            kubectl apply -f ${WORKSPACE}/deployment.yaml
                            '''
                            
                            // Wait for a few seconds to let the app start
                            sleep 10

                            // Check deployment status
                            sh '''
                            kubectl rollout status deployment/arpansahu-dot-me-app
                            '''
                            
                            // Verify service and get NodePort
                            def nodePort = sh(script: "kubectl get service arpansahu-dot-me-service -o=jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                            echo "Service NodePort: ${nodePort}"

                            // Get cluster IP address
                            def clusterIP = sh(script: "kubectl get nodes -o=jsonpath='{.items[0].status.addresses[0].address}'", returnStdout: true).trim()
                            echo "Cluster IP: ${clusterIP}"

                            // Verify if the service is accessible and delete the Docker container if accessible and update nginx configuration
                            sh """
                                HTTP_STATUS=\$(curl -s -o /dev/null -w "%{http_code}" -L http://${clusterIP}:${nodePort})
                                echo "HTTP Status: \$HTTP_STATUS"
                                
                                if [ "\$HTTP_STATUS" -eq 200 ]; then
                                    echo "Service is reachable at http://${clusterIP}:${nodePort}"
                                    
                                    DOCKER_CONTAINER=\$(docker ps -q -f name=${ENV_PROJECT_NAME})
                                    
                                    if [ "\$DOCKER_CONTAINER" ]; then
                                        echo "Docker container ${ENV_PROJECT_NAME} is running. Removing it..."
                                        docker rm -f ${ENV_PROJECT_NAME}
                                        
                                        if [ \$? -ne 0 ]; then
                                            echo "Failed to remove Docker container ${ENV_PROJECT_NAME}"
                                            exit 1
                                        fi
                                        
                                        echo "Updating Nginx configuration at ${NGINX_CONF}..."
                                        sudo sed -i 's|proxy_pass .*;|proxy_pass http://${clusterIP}:${nodePort};|' ${NGINX_CONF}
                                        
                                        if [ \$? -ne 0 ]; then
                                            echo "Failed to update Nginx configuration"
                                            exit 1
                                        fi
                                        
                                        echo "Reloading Nginx..."
                                        sudo nginx -s reload
                                        
                                        if [ \$? -ne 0 ]; then
                                            echo "Failed to reload Nginx"
                                            exit 1
                                        fi
                                        
                                        echo "Nginx reloaded successfully"
                                    else
                                        echo "Docker container ${ENV_PROJECT_NAME} is not running. Skipping removal and Nginx update."
                                    fi
                                else
                                    echo "Service is not reachable at http://${clusterIP}:${nodePort}. HTTP Status: \$HTTP_STATUS"
                                    exit 1
                                fi
                            """
                        } else {
                            error ".env file not found in the workspace."
                        }
                    }
                    currentBuild.description = 'DEPLOYMENT_EXECUTED'
                }
            }
        }
        stage('Check for Current Deployment Image Digest') {
            when {
                expression { !params.skip_checks }
            }
            steps {
                script {
                    echo "Checking for Current Deployment Image Digest"
                    def currentDigest = ''
                    def runningInDocker = sh(script: "docker ps -q -f name=${ENV_PROJECT_NAME}", returnStdout: true).trim()
                    if (runningInDocker) {
                        // Get the digest of the currently running Docker container
                        echo "Docker is running, getting image digest from the current Docker container"
                        currentDigest = sh(script: "docker inspect --format='{{.RepoDigests}}' ${ENV_PROJECT_NAME} | grep -o 'sha256:[a-f0-9]*'", returnStdout: true).trim()
                        echo "Current Docker image digest: ${currentDigest}"
                    } else {
                        def podName = sh(script: "kubectl get pods -l app=arpansahu-dot-me -o=jsonpath='{.items[0].metadata.name}' || echo 'none'", returnStdout: true).trim()
                        if (podName != 'none') {
                            echo "Pod is running, getting image digest from the currently running pod"
                            // Get the digest of the currently running Kubernetes pod
                            currentDigest = sh(script: "kubectl get pod ${podName} -o=jsonpath='{.status.containerStatuses[0].imageID}' | grep -o 'sha256:[a-f0-9]*'", returnStdout: true).trim()
                            echo "Current Docker image Digest: ${currentDigest}"
                        } else {
                            currentDigest = 'none'
                            echo "Nothing is running either docker or pod"
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                // Retrieve the latest commit message
                def commitMessage = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                if (currentBuild.description == 'DEPLOYMENT_EXECUTED') {
                    sh """curl -s \
                    -X POST \
                    --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET \
                    https://api.mailjet.com/v3.1/send \
                    -H "Content-Type:application/json" \
                    -d '{
                        "Messages":[
                                {
                                        "From": {
                                                "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                                "Name": "ArpanSahuOne Jenkins Notification"
                                        },
                                        "To": [
                                                {
                                                        "Email": "$MY_EMAIL_ADDRESS",
                                                        "Name": "Development Team"
                                                }
                                        ],
                                        "Subject": "Jenkins Build Pipeline your project ${currentBuild.fullDisplayName} Ran Successfully",
                                        "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} is now deployed",
                                        "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} is now deployed </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                                }
                        ]
                    }'"""
                }
                // Trigger the common_readme job on success if the commit message is not "Automatic Update readme.html for all repositories"
                if (commitMessage != "Automatic Update readme.html for all repositories") {
                    build job: 'common_readme', parameters: [string(name: 'project_git_url', value: 'https://github.com/arpansahu/${ENV_PROJECT_NAME}'), string(name: 'environment', value: 'prod')], wait: false
                } else {
                    echo "Skipping common_readme job trigger due to commit message: ${commitMessage}"
                }
            }
        }
        failure {
            sh """curl -s \
            -X POST \
            --user $MAIL_JET_API_KEY:$MAIL_JET_API_SECRET \
            https://api.mailjet.com/v3.1/send \
            -H "Content-Type:application/json" \
            -d '{
                "Messages":[
                        {
                                "From": {
                                        "Email": "$MAIL_JET_EMAIL_ADDRESS",
                                        "Name": "ArpanSahuOne Jenkins Notification"
                                },
                                "To": [
                                        {
                                                "Email": "$MY_EMAIL_ADDRESS",
                                                "Name": "Developer Team"
                                        }
                                ],
                            "Subject": "Jenkins Build Pipeline your project ${currentBuild.fullDisplayName} Ran Failed",
                            "TextPart": "Hola Development Team, your project ${currentBuild.fullDisplayName} deployment failed",
                            "HTMLPart": "<h3>Hola Development Team, your project ${currentBuild.fullDisplayName} is not deployed, Build Failed </h3> <br> <p> Build Url: ${env.BUILD_URL}  </p>"
                        }
                ]
            }'"""
        }
    }
}